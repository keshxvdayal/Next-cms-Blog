/**
 * Creates a controller which dispatches overlay related events
 *
 * @param handler - Dispatched event handler
 * @param overlayElement - Parent element containing rendered overlay elements
 * @public
 */
export declare function createOverlayController({
  handler,
  overlayElement,
  preventDefault,
}: OverlayOptions): OverlayController

/**
 * Cleanup function used when e.g. unmounting
 * @public
 */
export declare type DisableVisualEditing = () => void

/**
 * Element focus state
 * @public
 */
export declare type ElementFocusedState = 'clicked' | 'duplicate' | boolean

/**
 * Element state for consuming applications
 * @public
 */
export declare interface ElementState {
  id: string
  activated: boolean
  focused: ElementFocusedState
  hovered: boolean
  rect: OverlayRect
  sanity: SanityNode | SanityNodeLegacy
}

/**
 * Enables Visual Editing overlay in a page with sourcemap encoding.
 *
 * This will overlay UI on hovered elements that deep-links to Sanity Studio.
 * @public
 */
export declare function enableVisualEditing(
  options?: VisualEditingOptions,
): DisableVisualEditing

/**
 *
 * @public
 */
export declare interface HistoryAdapter {
  subscribe: (navigate: HistoryAdapterNavigate) => () => void
  update: (update: HistoryUpdate) => void
}

/**
 *
 * @public
 */
export declare type HistoryAdapterNavigate = (update: HistoryUpdate) => void

/**
 * Preview frame history update
 * @public
 */
export declare type HistoryUpdate = {
  type: 'push' | 'pop' | 'replace'
  url: string
}

/**
 * Base controller dispatched message
 * @typeParam T - Type of message
 * @public
 */
export declare interface Msg<T extends string> {
  type: T
}

/**
 * Object returned by a controller instantiation
 * @public
 */
export declare interface OverlayController {
  activate: () => void
  deactivate: () => void
}

/**
 * Callback function used for handling dispatched controller messages
 * @public
 */
export declare type OverlayEventHandler = (message: OverlayMsg) => void

/**
 * Controller dispatched messages
 * @public
 */
export declare type OverlayMsg =
  | OverlayMsgBlur
  | OverlayMsgActivate
  | OverlayMsgDeactivate
  | OverlayMsgElementActivate
  | OverlayMsgElementClick
  | OverlayMsgElementDeactivate
  | OverlayMsgElementMouseEnter
  | OverlayMsgElementMouseLeave
  | OverlayMsgElementRegister
  | OverlayMsgElementUnregister
  | OverlayMsgElementUpdateRect

/** @public */
export declare type OverlayMsgActivate = Msg<'overlay/activate'>

/** @public */
export declare type OverlayMsgBlur = Msg<'overlay/blur'>

/** @public */
export declare type OverlayMsgDeactivate = Msg<'overlay/deactivate'>

/** @public */
export declare interface OverlayMsgElement<T extends string>
  extends Msg<`element/${T}`> {
  id: string
}

/** @public */
export declare type OverlayMsgElementActivate =
  OverlayMsgElement<'activate'> & {
    sanity: SanityNode | SanityNodeLegacy
    rect: OverlayRect
  }

/** @public */
export declare type OverlayMsgElementClick = OverlayMsgElement<'click'> & {
  sanity: SanityNode | SanityNodeLegacy
}

/** @public */
export declare type OverlayMsgElementDeactivate =
  OverlayMsgElement<'deactivate'>

/** @public */
export declare type OverlayMsgElementMouseEnter =
  OverlayMsgElement<'mouseenter'> & {
    rect: OverlayRect
  }

/** @public */
export declare type OverlayMsgElementMouseLeave =
  OverlayMsgElement<'mouseleave'>

/** @public */
export declare type OverlayMsgElementRegister =
  OverlayMsgElement<'register'> & {
    sanity: SanityNode | SanityNodeLegacy
    rect: OverlayRect
  }

/** @public */
export declare type OverlayMsgElementUnregister =
  OverlayMsgElement<'unregister'>

/** @public */
export declare type OverlayMsgElementUpdateRect =
  OverlayMsgElement<'updateRect'> & {
    rect: OverlayRect
  }

/**
 * Options passed when instantiating an overlay controller
 * @public
 */
export declare interface OverlayOptions {
  handler: OverlayEventHandler
  overlayElement: HTMLElement
  preventDefault: boolean
}

/**
 * @public
 */
export declare interface OverlayRect {
  x: number
  y: number
  w: number
  h: number
}

/**
 * Data resolved from a Sanity node
 * @public
 */
export declare type SanityNode = {
  /** @deprecated */
  projectId?: string
  /** @deprecated */
  dataset?: string
  id: string
  path: string
  type?: string
  baseUrl: string
  tool?: string
  workspace?: string
}

/**
 * Data resolved from a (legacy) Sanity node
 * @public
 */
export declare type SanityNodeLegacy = {
  origin: string
  href: string
  data?: string
}

/**
 * @public
 */
export declare interface VisualEditingOptions {
  /**
   * The history adapter is used for Sanity Presentation to navigate URLs in the preview frame.
   */
  history?: HistoryAdapter
  /**
   * The CSS z-index on the root node that renders overlays, tweak it accordingly to what layout you have.
   */
  zIndex?: string | number
}

export {}
